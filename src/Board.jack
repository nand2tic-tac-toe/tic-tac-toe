class Board {
    // 0: пустая клетка, 1: нолик, 2: крестик
    field Array boardArray;
    // Количество пустых клеток
    field int emptyCellsCount;
    // Состояние поля
    // 0 - ряд, 1-столбик, 2 - верхняя диаг, 3 - нижняя диагональ
    field int winVariable; 
    field boolean isPlayerWin;
    field boolean isDraw;
    // По каким рядам/столбцам победа
    field int winRow, winCol; 
    // Параметры
    field int boardX, boardY, boardSize, thickness, cellSize, finishLineThickness, freeCellCount;

    constructor Board new(int x,int y) {
        let boardArray = Array.new(9);	
		let boardX = x;
		let boardY = y;
		let boardSize = 120;
		let thickness = 4;
		let finishLineThickness = 4;
		let cellSize = boardSize/3;

		do clear();
		do drawBoard();

		return this;
	}

    method void drawWin() {
		if (winVariable = 0) {
			do rowWin(winRow);
		}// enter after the curly bracket
		if (winVariable = 1) {
			do colWin(winCol);
		}// enter after the curly bracket
		if (winVariable = 2) {
			do topDiagonalWin();
		}// enter after the curly bracket
		if (winVariable = 3) {
			do botDiagonalWin();
		}// enter after the curly bracket
		return;
	}

    method boolean isWin() {
		return isPlayerWin;
	}
	
	method boolean isDraw() {
		return isDraw;
	}

    method int getEmptyCellsCount() {
		return emptyCellsCount;
	}

    // Чистим ресурсики (доску, память)
    method void dispose() {
        do Screen.setColor(false);
		do Screen.drawRectangle(boardX,boardY,boardX+boardSize, boardY+boardSize);
		do Screen.setColor(true);
		do Memory.deAlloc(boardArray);
        
		return;
	}

    // А тут просто очищаем доску
    method void clear() {
    var int i;
    let emptyCellsCount = 9;
    let isPlayerWin = false;
    let isDraw = false;
    while (i < 9) {
        let boardArray[i] = 0;
        let i = i + 1;
    }
    return;
}

    function void main() {
        do Screen.clearScreen();
        do drawBoard();

        return;
    }

  	method void drawBoard() {
    var int offset;
    let offset = thickness / 2;
    // Вертикальные линии
    do Screen.drawRectangle(boardX + cellSize - offset, boardY, boardX + cellSize + offset, boardY + boardSize);
    do Screen.drawRectangle(boardX + (2 * cellSize) - offset, boardY, boardX + (2 * cellSize) + offset, boardY + boardSize);
    // Горизонтальные линии
    do Screen.drawRectangle(boardX, boardY + cellSize - offset, boardX + boardSize, boardY + cellSize + offset);
    do Screen.drawRectangle(boardX, boardY + (2 * cellSize) - offset, boardX + boardSize, boardY + (2 * cellSize) + offset);
    return;
}

    method void rowWin(int row){
        var int y, displacement;
		let y = (cellSize/2) + boardY + (row * cellSize); 
		let displacement = finishLineThickness/2;
		do Screen.drawRectangle(boardX, y - displacement, boardX + boardSize, y + displacement);

		return; 
    }

    method void colWin(int col){
        var int x, displacement;
		let x = (cellSize/2) + boardX + (col *cellSize);
		let displacement = finishLineThickness/2;
		do Screen.drawRectangle(x - displacement, boardY, x + displacement, boardY + boardSize);

		return;
    }

    method void botDiagonalWin() {
    var int i, x, y; 
    let x = boardX; 
    let y = boardY; 
    let i = finishLineThickness - 1; 

    // (нижняя диагональ)
    while (~(i < 0)) {
        //(от левого нижнего угла к правому верхнему)
        do Screen.drawLine(x, y + boardSize - i, x + boardSize - i, y);
        //(от левого верхнего угла к правому нижнему)
        do Screen.drawLine(x + i, y + boardSize, x + boardSize, y + i);
        let i = i - 1; 
    }

    return;
    }

    method void topDiagonalWin() {
    var int i, x, y; 
    let x = boardX; 
    let y = boardY; 
    let i = finishLineThickness - 1; //  счётчик для толщины линии

    while (~(i < 0)) {
        // (от левого верхнего угла к правому нижнему)
        do Screen.drawLine(x + i, y, x + boardSize, y + boardSize - i);
        // (от левого нижнего угла к правому верхнему)
        do Screen.drawLine(x, y + i, x + boardSize - i, y + boardSize);
        let i = i - 1; // Уменьшаем счётчик
    }
    
    return;
    }

    method int positionToIndex(int row, int column) {
		return column + (row * 3);
	}

    method Array indexToPosition(int index) {
		var Array moves;

		let moves = Array.new(2);
		let moves[0] = (index - 1) / 3 ;
		let moves[1] = (index - 1) - (3 * moves[0]);

		return moves;
	}
	
	method boolean isFree(int row, int column) {
		if (boardArray[positionToIndex(row, column)] = 0) {
			return true;
		} else { // enter befor else
			return false;
		}
	}

    method void evaluateWin() {
        // FIX: names of variables
		// Done!
		var int row, col, cell1, cell2, cell3; //bad naming variables
		let isPlayerWin = false; 
		let isDraw = false; 
		let row = 0; 
		let col = 0; 

		// Проверяем победу по строкам
		while (row < 3) {
			let cell1 = boardArray[positionToIndex(row, 0)]; 
			let cell2 = boardArray[positionToIndex(row, 1)]; 
			let cell3 = boardArray[positionToIndex(row, 2)];
			// Если все три клетки в строке равны и не пусты, игрок выиграл
			if ((cell1 = cell2) & (cell2 = cell3) & (cell1 > 0)) {
				let isPlayerWin = true; 
				let winVariable = 0; 
				let winRow = row; //запоминаем выигрышный ряд
				return;
			}
			let row = row + 1;
		}

		// Проверяем победу по столбцам
		while (col < 3) {
			let cell1 = boardArray[positionToIndex(0, col)]; 
			let cell2 = boardArray[positionToIndex(1, col)]; 
			let cell3 = boardArray[positionToIndex(2, col)]; 
			// Если все три клетки в столбце равны и не пусты, игрок выиграл
			if ((cell1 = cell2) & (cell2 = cell3) & (cell1 > 0)) {
				let isPlayerWin = true; 
				let winVariable = 1; 
				let winCol = col; // Запоминаем выигрышный столбец
				return;
			}
			let col = col + 1; // Переходим к следующему столбцу
		}

		// Проверяем победу по главной диагонали (сверху вниз идем)
		let cell1 = boardArray[0]; 
		let cell2 = boardArray[4]; 
		let cell3 = boardArray[8]; 
		// Если все три клетки на диагонали равны и не пусты, игрок выиграл
		if ((cell1 = cell2) & (cell2 = cell3) & (cell1 > 0)) {
			let isPlayerWin = true; 
			let winVariable = 2;
			return;
		}

		// Проверяем победу по побочной диагонали
		let cell1 = boardArray[6]; 
		let cell2 = boardArray[4]; 
		let cell3 = boardArray[2]; 

		if ((cell1 = cell2) & (cell2 = cell3) & (cell1 > 0)) {
			let isPlayerWin = true; 
			let winVariable = 3; 
			return;
		}

		// Проверяем ничью 
		if (emptyCellsCount = 0) {
			let isDraw = true;
			return;
		}
		return;
	}

    // Добавляем наш ход
    method void makeMove(int row, int col, Mark mark) {
        // Устанавливаем тип фигуры (крестик или нолик) в указанной клетке
        let boardArray[positionToIndex(row, col)] = mark.getType();
        let emptyCellsCount = emptyCellsCount - 1;

        return;
    }

    // Рисуем наш ход
    method void drawMove(int row, int column, Mark mark) {
        var int xl, yt; 
        // находим х (центрируем по гориз.)
        let xl = boardX + (column * cellSize) + ((cellSize - mark.getWidth()) / 2);
        // находим у (центрируем по верт.)
        let yt = boardY + (row * cellSize) + ((cellSize - mark.getHeight()) / 2);
        // Отрисовываем фигуру на доске
        do mark.drawMark(xl, yt);

        return;
    }

    // Отменa хода
    // UPD: зачем mark? 
	// answ: затуп, сначала написал, забыл убрать
    method void takeBackMove(int row, int column) {
        let boardArray[positionToIndex(row, column)] = 0;
        let emptyCellsCount = emptyCellsCount + 1;
        return;
    }

    method Array getMoves() {
        var Array moves;
		var int r1, c1, counter;
		let r1 = 0;
		let c1 = 0;
		let moves = Array.new(emptyCellsCount * 2);
		let counter = 0;// enter after ;
		while (r1 < 3) {
			let c1 = 0;
			while (c1 < 3) {
				if (boardArray[positionToIndex(r1, c1)] = 0) {
					let moves[counter] = r1;
					let moves[counter + 1] = c1;
					let counter = counter + 2;
				}
				let c1 = c1 + 1;
			}
			let r1 = r1 + 1;
		}//enter after the curly bracket
		return moves;
	}
}
